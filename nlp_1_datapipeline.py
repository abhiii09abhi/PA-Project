# -*- coding: utf-8 -*-
"""NLP 1 DataPipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14amu5UYr1kv6HJoS-3uJWvYfnmOEDBcj
"""



import pandas as pd

disease_data = {
    "symptoms": [
        "mild fever, sneezing, sore throat",                     # Cold
        "high fever, chills, vomiting, body pain",              # Malaria
        "fever, dry cough, loss of taste, fatigue",             # COVID-19
        "headache, rash, joint pain, bleeding gums",            # Dengue
        "abdominal pain, fever, diarrhea, loss of appetite",    # Typhoid
        "wheezing, shortness of breath, chest tightness",       # Asthma
        "cough with phlegm, chest pain, fever, fatigue",        # Pneumonia
        "runny nose, mild cough, congestion",                   # Cold
        "nausea, high fever, rash, joint pain",                 # Dengue
        "shivering, body pain, vomiting, high fever"            # Malaria
    ],
    "disease": [
        "Cold", "Malaria", "COVID-19", "Dengue", "Typhoid",
        "Asthma", "Pneumonia", "Cold", "Dengue", "Malaria"
    ]
}

df_disease = pd.DataFrame(disease_data)

precaution_data = {
    "input": [
        "Cold: mild fever, sneezing, sore throat",
        "Malaria: high fever, chills, vomiting, body pain",
        "COVID-19: fever, dry cough, loss of taste, fatigue",
        "Dengue: headache, rash, joint pain, bleeding gums",
        "Typhoid: abdominal pain, fever, diarrhea, loss of appetite",
        "Asthma: wheezing, shortness of breath, chest tightness",
        "Pneumonia: cough with phlegm, chest pain, fever, fatigue"
    ],
    "precaution": [
        "Rest at home, drink warm fluids, use over-the-counter medicine, and monitor symptoms.",
        "Take antimalarial meds, drink fluids, reduce fever with paracetamol, and rest.",
        "Isolate, monitor oxygen levels, stay hydrated, and consult doctor if symptoms worsen.",
        "Avoid mosquito bites, monitor platelets, drink fluids, and take paracetamol for fever.",
        "Take antibiotics as prescribed, eat well-cooked food, and rest properly.",
        "Avoid allergens, use inhalers, monitor breathing, and stay in a clean environment.",
        "Take antibiotics, rest, drink warm liquids, and seek help if breathing worsens."
    ]
}

df_precautions = pd.DataFrame(precaution_data)

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline

disease_model = Pipeline([
    ('tfidf', TfidfVectorizer()),
    ('clf', LogisticRegression(max_iter=1000))
])
disease_model.fit(df_disease['symptoms'], df_disease['disease'])

precaution_model = Pipeline([
    ('tfidf', TfidfVectorizer()),
    ('clf', MultinomialNB())  # or LogisticRegression
])
precaution_model.fit(df_precautions['input'], df_precautions['precaution'])

def predict_disease_and_precaution(symptom_text):
    disease = disease_model.predict([symptom_text])[0]
    precaution_input = f"{disease}: {symptom_text}"
    precaution = precaution_model.predict([precaution_input])[0]
    return disease, precaution

# Test input
symptom_input = "fever, cough, sore throat, fatigue"
disease, precaution = predict_disease_and_precaution(symptom_input)

print("ü©∫ Predicted Disease:", disease)
print("üõ°Ô∏è AI-Generated Precautions:\n", precaution)

import joblib

# Save the disease prediction model
joblib.dump(disease_model, 'disease_model.pkl')

# Save the precaution generation model
joblib.dump(precaution_model, 'precaution_model.pkl')

